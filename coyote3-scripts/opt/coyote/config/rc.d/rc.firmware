#!/bin/sh
#
# Vortech Embedded Linux firmware initialization script v2.0
# Author: Joshua Jackson
# Date: 12/29/2000
# Revision: 10/10/2005
#

hwfailure () {
echo "-----------------------------------------------------------"
echo "This copy of Vortech Embedded Linux has not been configured"
echo "to run on your hardware.  Please consult the manual."
echo "-----------------------------------------------------------"
exit
}

check_ssh_keys() {
	if [ ! -r /mnt/config/ssh.d/dropbear_rsa_host_key ]; then
		if [ -r /mnt/config/ssh.d/ssh_host_rsa_key ]; then
			sshkeyconvert openssh dropbear /mnt/config/ssh.d/ssh_host_rsa_key /mnt/config/ssh.d/dropbear_rsa_host_key
			rm -f /mnt/config/ssh.d/ssh_host_rsa_key
			rm -f /mnt/config/ssh.d/ssh_host_key
			rm -f /mnt/config/ssh.d/*.pub
			rm -f /mnt/config/ssh.d/sshd_config
		else
			sshkeygen -t rsa -f /mnt/config/ssh.d/dropbear_rsa_host_key
		fi
	fi
	if [ ! -r /mnt/config/ssh.d/dropbear_dss_host_key ]; then
		if [ -r /mnt/config/ssh.d/ssh_host_dsa_key ]; then
			sshkeyconvert openssh dropbear /mnt/config/ssh.d/ssh_host_dsa_key /mnt/config/ssh.d/dropbear_dss_host_key
			rm -f /mnt/config/ssh.d/ssh_host_dsa_key
		else
			sshkeygen -t dss -f /mnt/config/ssh.d/dropbear_dss_host_key
		fi
	fi
}

# At the start of this script, the system should have already done a pivot_root into the 
# firmware tmpfs and lauched this script via init.

# Create the busybox links
#/bin/busybox --install -s

# Copy in the root/boot device entries
#cp -pa /mnt/dev/root /dev/root
#cp -pa /mnt/dev/boot /dev/boot

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin:/usr/local/sbin
export PATH
umask 022

# Keep things quiet
dmesg -n 1

#
#       Trap CTRL-C &c only in this shell so we can interrupt subprocesses.
#
# trap ":" 2 3 20

# Mount the pts filesystem
mount none /dev/pts -t devpts
# Mount the usbdevfs filesystem
# mount usbdevfs /proc/bus/usb -t usbdevfs

# Configure the system
if ! [ -r /etc/config/hwconfig ]; then
	hwfailure
fi

# Source the hardware configuration
. /etc/config/hwconfig

# Permission sanity
# chmod 755 /
#chmod 1777 /tmp

# Test the integrity of the boot filesystem
/sbin/e2fsck -p -y $BOOT_DEV 1> /dev/null 2> /dev/null

# Configure the dynamic loader
/mnt/sbin/ldconfig

mount_flash_rw

# If the system has not been configured, create an initial config
if ! [ -f /mnt/config/config ]; then
	echo
	echo
	echo This system has not been configured yet, you will now be given a chance to
	echo set some basic defaults.
	echo
	/usr/config/setup
fi

# Start the system loggers in local-only mode
syslogd -m 0 -C
klogd

# Load the system watchdog and utility management
# daemon
modprobe $WATCHDOG
/sbin/watchdog /dev/watchdog
check_ssh_keys

mount_flash_ro

# Set some initial, default networking parameters

# Disable ICMP replies to a broadcast address
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts

# Ignore bogus ICMP responses
echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses

for i in /proc/sys/net/ipv4/conf/*; do
	echo 0 > $i/send_redirects
	echo 0 > $i/accept_redirects
	echo 1 > $i/secure_redirects
	echo 0 > $i/accept_source_route
	echo 0 > $i/bootp_relay
	echo 0 > $i/proxy_arp
	# echo 2 > $i/rp_filter
done

# Run any firmware addons' init scripts
for SCR in /opt/*/etc/rc.d/rc.*; do
    [ -x "$SCR" ] && $SCR
done

#Save the loader version
/mnt/sbin/fwloader -v > /tmp/loader.ver

# Load the config script parser
/sbin/loadconfig

# Clear the utmp file to allow tty logins
: > /var/run/utmp

set_build_str

# Update the issue file
echo > /etc/issue
echo "Coyote Linux Personal Firewall v$BUILD_STR" >> /etc/issue
cat /etc/config/templates/issue >> /etc/issue

# Start cron
crond -L /dev/null

# Start the LCD Control Daemon (FW-5xx units only)
#if [ -x /sbin/lrd ]; then
#    /sbin/lrd
#fi

echo "System initialized."

clear
